// +build !ignore_autogenerated

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by deepcopy-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AtomixCluster) DeepCopyInto(out *AtomixCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	out.Status = in.Status
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AtomixCluster.
func (in *AtomixCluster) DeepCopy() *AtomixCluster {
	if in == nil {
		return nil
	}
	out := new(AtomixCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AtomixCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AtomixClusterList) DeepCopyInto(out *AtomixClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]AtomixCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AtomixClusterList.
func (in *AtomixClusterList) DeepCopy() *AtomixClusterList {
	if in == nil {
		return nil
	}
	out := new(AtomixClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *AtomixClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Benchmark) DeepCopyInto(out *Benchmark) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]v1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Resources.DeepCopyInto(&out.Resources)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Benchmark.
func (in *Benchmark) DeepCopy() *Benchmark {
	if in == nil {
		return nil
	}
	out := new(Benchmark)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Chaos) DeepCopyInto(out *Chaos) {
	*out = *in
	if in.Monkeys != nil {
		in, out := &in.Monkeys, &out.Monkeys
		*out = make([]Monkey, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Chaos.
func (in *Chaos) DeepCopy() *Chaos {
	if in == nil {
		return nil
	}
	out := new(Chaos)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterSpec) DeepCopyInto(out *ClusterSpec) {
	*out = *in
	in.ManagementGroup.DeepCopyInto(&out.ManagementGroup)
	if in.PartitionGroups != nil {
		in, out := &in.PartitionGroups, &out.PartitionGroups
		*out = make([]PartitionGroupSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Benchmark != nil {
		in, out := &in.Benchmark, &out.Benchmark
		*out = new(Benchmark)
		(*in).DeepCopyInto(*out)
	}
	in.Chaos.DeepCopyInto(&out.Chaos)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterSpec.
func (in *ClusterSpec) DeepCopy() *ClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterStatus) DeepCopyInto(out *ClusterStatus) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterStatus.
func (in *ClusterStatus) DeepCopy() *ClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Compaction) DeepCopyInto(out *Compaction) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Compaction.
func (in *Compaction) DeepCopy() *Compaction {
	if in == nil {
		return nil
	}
	out := new(Compaction)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrashMonkey) DeepCopyInto(out *CrashMonkey) {
	*out = *in
	out.CrashStrategy = in.CrashStrategy
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrashMonkey.
func (in *CrashMonkey) DeepCopy() *CrashMonkey {
	if in == nil {
		return nil
	}
	out := new(CrashMonkey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CrashStrategy) DeepCopyInto(out *CrashStrategy) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CrashStrategy.
func (in *CrashStrategy) DeepCopy() *CrashStrategy {
	if in == nil {
		return nil
	}
	out := new(CrashStrategy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GroupSelector) DeepCopyInto(out *GroupSelector) {
	*out = *in
	if in.MatchGroups != nil {
		in, out := &in.MatchGroups, &out.MatchGroups
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GroupSelector.
func (in *GroupSelector) DeepCopy() *GroupSelector {
	if in == nil {
		return nil
	}
	out := new(GroupSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *LogPartitionGroup) DeepCopyInto(out *LogPartitionGroup) {
	*out = *in
	in.PersistentPartitionGroup.DeepCopyInto(&out.PersistentPartitionGroup)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new LogPartitionGroup.
func (in *LogPartitionGroup) DeepCopy() *LogPartitionGroup {
	if in == nil {
		return nil
	}
	out := new(LogPartitionGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ManagementGroup) DeepCopyInto(out *ManagementGroup) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]v1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Resources.DeepCopyInto(&out.Resources)
	in.Storage.DeepCopyInto(&out.Storage)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ManagementGroup.
func (in *ManagementGroup) DeepCopy() *ManagementGroup {
	if in == nil {
		return nil
	}
	out := new(ManagementGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Monkey) DeepCopyInto(out *Monkey) {
	*out = *in
	if in.RateSeconds != nil {
		in, out := &in.RateSeconds, &out.RateSeconds
		*out = new(int64)
		**out = **in
	}
	if in.PeriodSeconds != nil {
		in, out := &in.PeriodSeconds, &out.PeriodSeconds
		*out = new(int64)
		**out = **in
	}
	if in.Jitter != nil {
		in, out := &in.Jitter, &out.Jitter
		*out = new(float64)
		**out = **in
	}
	if in.Selector != nil {
		in, out := &in.Selector, &out.Selector
		*out = new(MonkeySelector)
		(*in).DeepCopyInto(*out)
	}
	if in.Crash != nil {
		in, out := &in.Crash, &out.Crash
		*out = new(CrashMonkey)
		**out = **in
	}
	if in.Partition != nil {
		in, out := &in.Partition, &out.Partition
		*out = new(PartitionMonkey)
		**out = **in
	}
	if in.Stress != nil {
		in, out := &in.Stress, &out.Stress
		*out = new(StressMonkey)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Monkey.
func (in *Monkey) DeepCopy() *Monkey {
	if in == nil {
		return nil
	}
	out := new(Monkey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MonkeySelector) DeepCopyInto(out *MonkeySelector) {
	*out = *in
	if in.LabelSelector != nil {
		in, out := &in.LabelSelector, &out.LabelSelector
		*out = new(metav1.LabelSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.GroupSelector != nil {
		in, out := &in.GroupSelector, &out.GroupSelector
		*out = new(GroupSelector)
		(*in).DeepCopyInto(*out)
	}
	if in.PodSelector != nil {
		in, out := &in.PodSelector, &out.PodSelector
		*out = new(PodSelector)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MonkeySelector.
func (in *MonkeySelector) DeepCopy() *MonkeySelector {
	if in == nil {
		return nil
	}
	out := new(MonkeySelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionGroup) DeepCopyInto(out *PartitionGroup) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionGroup.
func (in *PartitionGroup) DeepCopy() *PartitionGroup {
	if in == nil {
		return nil
	}
	out := new(PartitionGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionGroupSpec) DeepCopyInto(out *PartitionGroupSpec) {
	*out = *in
	if in.Env != nil {
		in, out := &in.Env, &out.Env
		*out = make([]v1.EnvVar, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	in.Resources.DeepCopyInto(&out.Resources)
	if in.Raft != nil {
		in, out := &in.Raft, &out.Raft
		*out = new(RaftPartitionGroup)
		(*in).DeepCopyInto(*out)
	}
	if in.PrimaryBackup != nil {
		in, out := &in.PrimaryBackup, &out.PrimaryBackup
		*out = new(PrimaryBackupPartitionGroup)
		**out = **in
	}
	if in.Log != nil {
		in, out := &in.Log, &out.Log
		*out = new(LogPartitionGroup)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionGroupSpec.
func (in *PartitionGroupSpec) DeepCopy() *PartitionGroupSpec {
	if in == nil {
		return nil
	}
	out := new(PartitionGroupSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionMonkey) DeepCopyInto(out *PartitionMonkey) {
	*out = *in
	out.PartitionStrategy = in.PartitionStrategy
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionMonkey.
func (in *PartitionMonkey) DeepCopy() *PartitionMonkey {
	if in == nil {
		return nil
	}
	out := new(PartitionMonkey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PartitionStrategy) DeepCopyInto(out *PartitionStrategy) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PartitionStrategy.
func (in *PartitionStrategy) DeepCopy() *PartitionStrategy {
	if in == nil {
		return nil
	}
	out := new(PartitionStrategy)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PersistentPartitionGroup) DeepCopyInto(out *PersistentPartitionGroup) {
	*out = *in
	out.PartitionGroup = in.PartitionGroup
	in.Storage.DeepCopyInto(&out.Storage)
	out.Compaction = in.Compaction
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PersistentPartitionGroup.
func (in *PersistentPartitionGroup) DeepCopy() *PersistentPartitionGroup {
	if in == nil {
		return nil
	}
	out := new(PersistentPartitionGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PodSelector) DeepCopyInto(out *PodSelector) {
	*out = *in
	if in.MatchPods != nil {
		in, out := &in.MatchPods, &out.MatchPods
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PodSelector.
func (in *PodSelector) DeepCopy() *PodSelector {
	if in == nil {
		return nil
	}
	out := new(PodSelector)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PrimaryBackupPartitionGroup) DeepCopyInto(out *PrimaryBackupPartitionGroup) {
	*out = *in
	out.PartitionGroup = in.PartitionGroup
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PrimaryBackupPartitionGroup.
func (in *PrimaryBackupPartitionGroup) DeepCopy() *PrimaryBackupPartitionGroup {
	if in == nil {
		return nil
	}
	out := new(PrimaryBackupPartitionGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RaftPartitionGroup) DeepCopyInto(out *RaftPartitionGroup) {
	*out = *in
	in.PersistentPartitionGroup.DeepCopyInto(&out.PersistentPartitionGroup)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RaftPartitionGroup.
func (in *RaftPartitionGroup) DeepCopy() *RaftPartitionGroup {
	if in == nil {
		return nil
	}
	out := new(RaftPartitionGroup)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Storage) DeepCopyInto(out *Storage) {
	*out = *in
	if in.ClassName != nil {
		in, out := &in.ClassName, &out.ClassName
		*out = new(string)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Storage.
func (in *Storage) DeepCopy() *Storage {
	if in == nil {
		return nil
	}
	out := new(Storage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressCPU) DeepCopyInto(out *StressCPU) {
	*out = *in
	in.StressConfig.DeepCopyInto(&out.StressConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressCPU.
func (in *StressCPU) DeepCopy() *StressCPU {
	if in == nil {
		return nil
	}
	out := new(StressCPU)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressConfig) DeepCopyInto(out *StressConfig) {
	*out = *in
	if in.Workers != nil {
		in, out := &in.Workers, &out.Workers
		*out = new(int)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressConfig.
func (in *StressConfig) DeepCopy() *StressConfig {
	if in == nil {
		return nil
	}
	out := new(StressConfig)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressHDD) DeepCopyInto(out *StressHDD) {
	*out = *in
	in.StressConfig.DeepCopyInto(&out.StressConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressHDD.
func (in *StressHDD) DeepCopy() *StressHDD {
	if in == nil {
		return nil
	}
	out := new(StressHDD)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressIO) DeepCopyInto(out *StressIO) {
	*out = *in
	in.StressConfig.DeepCopyInto(&out.StressConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressIO.
func (in *StressIO) DeepCopy() *StressIO {
	if in == nil {
		return nil
	}
	out := new(StressIO)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressMemory) DeepCopyInto(out *StressMemory) {
	*out = *in
	in.StressConfig.DeepCopyInto(&out.StressConfig)
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressMemory.
func (in *StressMemory) DeepCopy() *StressMemory {
	if in == nil {
		return nil
	}
	out := new(StressMemory)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressMonkey) DeepCopyInto(out *StressMonkey) {
	*out = *in
	out.StressStrategy = in.StressStrategy
	if in.IO != nil {
		in, out := &in.IO, &out.IO
		*out = new(StressIO)
		(*in).DeepCopyInto(*out)
	}
	if in.CPU != nil {
		in, out := &in.CPU, &out.CPU
		*out = new(StressCPU)
		(*in).DeepCopyInto(*out)
	}
	if in.Memory != nil {
		in, out := &in.Memory, &out.Memory
		*out = new(StressMemory)
		(*in).DeepCopyInto(*out)
	}
	if in.HDD != nil {
		in, out := &in.HDD, &out.HDD
		*out = new(StressHDD)
		(*in).DeepCopyInto(*out)
	}
	if in.Network != nil {
		in, out := &in.Network, &out.Network
		*out = new(StressNetwork)
		(*in).DeepCopyInto(*out)
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressMonkey.
func (in *StressMonkey) DeepCopy() *StressMonkey {
	if in == nil {
		return nil
	}
	out := new(StressMonkey)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressNetwork) DeepCopyInto(out *StressNetwork) {
	*out = *in
	if in.LatencyMilliseconds != nil {
		in, out := &in.LatencyMilliseconds, &out.LatencyMilliseconds
		*out = new(int64)
		**out = **in
	}
	if in.Jitter != nil {
		in, out := &in.Jitter, &out.Jitter
		*out = new(float64)
		**out = **in
	}
	if in.Correlation != nil {
		in, out := &in.Correlation, &out.Correlation
		*out = new(float64)
		**out = **in
	}
	if in.Distribution != nil {
		in, out := &in.Distribution, &out.Distribution
		*out = new(LatencyDistribution)
		**out = **in
	}
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressNetwork.
func (in *StressNetwork) DeepCopy() *StressNetwork {
	if in == nil {
		return nil
	}
	out := new(StressNetwork)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StressStrategy) DeepCopyInto(out *StressStrategy) {
	*out = *in
	return
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StressStrategy.
func (in *StressStrategy) DeepCopy() *StressStrategy {
	if in == nil {
		return nil
	}
	out := new(StressStrategy)
	in.DeepCopyInto(out)
	return out
}
